git의 동작원리

Working directory  			     / 작업할 파일이 있는 디렉토리

staging area				     / 커밋을 수행할 파일들이 올라가는 영역
					      and 커밋을 수행하면 Local Repository(내컴퓨터 저장소)로 이동하게됨

===========================================================
깃 환경설정

git config --global                                            /컴퓨터 전체에서 동일한 옵션

git config --global user.name ---------		     / 내 컴퓨터 모든곳에 유저 네임 등록
git config --global user.email --------------	     / 내 컴퓨터 모든곳에 유저 이메일 등록

cd C:/Education				     / 임의 생성 폴더로 이동

git clone https://github.com/ghdtjrals3/Git-HongSt  /폴더 클론해주기 >> 임의생성한 Education폴더에 Git-Hongst 저장소 추가


============================================

cd Git-Hongst				     /  내 저장소로 가기
	
git add ----.txt				    / 파일 추가 

git commit -m				    / 확정지어주기

git push 					    / 최종적으로 커밋된 파일 원격 저장소로 저장

=============================================================

git fetch  				    / 원격 저장소에서 내컴퓨터로 가져오는 역할

git merge				   / 내 컴퓨터에서 작업공간으로 가져오기 때문에 fetch가 먼저 선언하고 그 다음으로 선언함 (동기화시켜줌)

git pull					   / fetch, merge 를 한번에 수행

====================================================

git status 				   / 로컬 저장소에 변경사항 확인

git reset 파일명 				   / working directory에서 staging area로 넘긴 파일을 다시 취소 할때

git add .					  / .은 모든파일을 의미

git checkout -- 파일명			  / 수정된 내용 초기화

git commit --amend			  / 커밋 메세지 수정
: > wq!					  / 수정창나가기

git log					   / log 확인

====================================
git reset --hard 해쉬값			   / 이전의 커밋한 이후로 돌아가고 싶을때 사용
git push -f				  / reset한 경우 Local 저장소랑 원격저장소랑 다르기 때문에 그냥 push는 안됨


===============================
commit --amend
a : 수정모드
==============================

git branch  					/ 동시에 여러 개발자들이 프로젝트에서 각기 다른 기능을 개발할 수 있도록 제공하는 기능, 언제나 배포가능한 상태여야함
Matser Branch				/ Git 저장소를 만들면 마스터 브랜치가 자동 생성
check out				/ 별도의 브랜치를 만들때 사용





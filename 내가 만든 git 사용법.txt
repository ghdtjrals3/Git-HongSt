git의 동작원리

Working directory  			     / 작업할 파일이 있는 디렉토리

staging area				     / 커밋을 수행할 파일들이 올라가는 영역
					      and 커밋을 수행하면 Local Repository(내컴퓨터 저장소)로 이동하게됨

===========================================================
깃 환경설정

git config --global                                            /컴퓨터 전체에서 동일한 옵션

git config --global user.name ---------		     / 내 컴퓨터 모든곳에 유저 네임 등록
git config --global user.email --------------	     / 내 컴퓨터 모든곳에 유저 이메일 등록

cd C:/Education				     / 임의 생성 폴더로 이동

git clone https://github.com/ghdtjrals3/Git-HongSt  /폴더 클론해주기 >> 임의생성한 Education폴더에 Git-Hongst 저장소 추가


============================================

cd Git-Hongst				     /  내 저장소로 가기
	
git add ----.txt				    / 파일 추가 

git commit -m				    / 확정지어주기

git push 					    / 최종적으로 커밋된 파일 원격 저장소로 저장

=============================================================

git fetch  				    / 원격 저장소에서 내컴퓨터로 가져오는 역할

git merge				   / 내 컴퓨터에서 작업공간으로 가져오기 때문에 fetch가 먼저 선언하고 그 다음으로 선언함 (동기화시켜줌)

git pull					   / fetch, merge 를 한번에 수행

====================================================

git status 				   / 로컬 저장소에 변경사항 확인

git reset 파일명 				   / working directory에서 staging area로 넘긴 파일을 다시 취소 할때

git add .					  / .은 모든파일을 의미

git checkout -- 파일명			  / 수정된 내용 초기화

git commit --amend			  / 커밋 메세지 수정
: > wq!					  / 수정창나가기

git log					   / log 확인

====================================
git reset --hard 해쉬값			   / 이전의 커밋한 이후로 돌아가고 싶을때 사용
git push -f				  / reset한 경우 Local 저장소랑 원격저장소랑 다르기 때문에 그냥 push는 안됨


===============================
commit --amend
a : 수정모드
==============================

git branch  					/ 동시에 여러 개발자들이 프로젝트에서 각기 다른 기능을 개발할 수 있도록 제공하는 기능, 언제나 배포가능한 상태여야함
Matser Branch				/ Git 저장소를 만들면 마스터 브랜치가 자동 생성
check out				/ 별도의 브랜치를 만들때 사용
git branch develop 			/ 디벨롭 브랜치 생서
git branch				/ 어떤 브랜치 사용중인지 확인
git checkout 브랜치이름			/ 해당 브랜치로 접속
git merge 브랜치이름(작업한 브랜치)		/ 해당 브랜치가 커밋한 내용을 마스터에서 최종확인해서 푸쉬하기 전
git branch -d 브랜치이름			/ 해당 브랜치 병합이 끝난 후 사용하지 않을 때 사용

기본적으로 브랜치 병합은 마스터브랜치에서 사용


==================================
git branch 충동시

develop 브랜치에서 파일 수정
master 브랜치에서 동일한 파일을 다른 내용으로 수정
git log를 checkout으로 master와 develop이 서로 명시가 안되어있음 ( 서로 같은 파일에 다른 내용이기 때문에)
이상태에서 master브랜치에서 merge 병합 수행을 하면 conflict 충돌 오류가 발생
이럴땐 직접 소스코드로 들어가면서 master와 develop의 상이한 부분이 표시되어 있음
수동으로 선택, 수정 후 add, commit을 사용한 후에 push하면됨, merge를 사용할 경우 이미 수행됐다고 명시됨

==================================
git 원격 저장소 관리

git remote 				/ 현재 원격저장소 이름을 알 수 있음
git remote show 저장소 이름		/ 저장소의 이름을 자세하게 확인할 수 있음
git remote add 저장소 이름 , 특정한 경로	/ 저장소 추가하고 원하는 리포지터리를 가져올수 있음
git remote -v				/원격 저장소의 전체 목록을 가져옴
gir remote rename 기존저장소 , 바꾸저장소	/원하는 저장소의 이름을 바꿀수 있음
git remote rm 저장소이름			/특정 저장소 삭제

========================================
log 사용법

git log --stat				/각 커밋에 대한 통계정보
git log --graph				/브랜치와 병합정보로 그래프로 출력
git log -p					/커밋에 적용된 구체적인 항목출력
git long --pretty				/커밋정보를 우리가 지정한 형식으로 출력
git log --pretty=oneline			/커밋정보를 한줄로 출력
git --pretty=format:"%h -> %an, %ar : %s" --graph / 커밋해쉬값 , 작성자 이름, 작성날짜 , 커밋메세지
==========================================
소스코드만 추출하기

git archive --format=zip master -o Matser.zip	/아카이브 명령어를 통해 압축을한다 -o는 아웃풋을 의미

git archive --format=zip master -o ../Matser.zip/이전 폴더로 압축

========================================
git config 환경설정 (리눅스 기준)

git config --list 				/현재 깃환경설정 출력

git config --global user.name "---------"

cd ~
ls -al
cat .gitconfig

=============================================
git rm --cache [파일이름]	/깃 원격저장소에서 파일 삭제하기

깃 프로젝트 사용법 더 알아야 됨 차후 추가하자